GETTING STARTED
===============

This is a brief guide to get you started with ZombiePHP.

Requirements:

   PHP 5.3+

   Apache with mod_rewrite or a comparable rewriting engine.
   Having mod_headers installed is recommended.

   Mysql. Version 5+ recommended. Support for PostgreSQL and other dbms coming.

   NOTE: ZombiePHP can be coerced to work with PHP 5.x, 
         but this isn't recommended.

1. Download the latest version 

   bash> git clone git://github.com/regality/Zombie-PHP.git zombie
   bash> cd zombie
   bash> git submodule init
   bash> git submodule update

2. Set up your webroot to zombie/web

   Each web server will have it's own way of doing this.
   If you are running apache with the apache config file at
   /etc/apache/apache.conf and the zombie root at /var/www/zombie
   do the following:

   Add this to apache.conf

      <VirtualHost *:80>
          DocumentRoot /var/www/zombie/web
          ServerName yourwebsite.com
          <Directory />
            AllowOverride All
          </Directory>
      </VirtualHost>

   If you are running on your local machine yourwebsite.com can 
   be replaced with 'localhost'

   Once you've added the virtual host run

      bash> sudo /etc/init.d/apache2 restart

3. Edit zombie config

   To get started you will need to create a config file.
   The easiest thing is to copy the sample config and make
   a few changes.

      bash> cd config/
      bash> mv config-sample.php config.php
 
   Open config.php with your favorite editor (vim is recommended)

   Change the following lines in the config:
   (The lines do not appear as follows in the sample config.)

      $config['domain'] = '<your domain>';
      $config['zombie_root'] = '<location of your zombie installation>'
      $config['mysql']['host'] = '<mysql host>';
      $config['mysql']['user'] = '<mysql user>';
      $config['mysql']['pass'] = '<mysql password>';
      $config['mysql']['database'] = '<mysql database name>';


   NOTE: The domain is used when setting the session cookie,
         so an incorrect domain will prevent you from logging in.

4. Run install script

   You need to have the database created before running
   this script, so open your mysql shell:

      mysql> CREATE DATABASE your_db_name;

   Presently there is only an install script for mysql.
   The script create some mysql tables and your first user.

      bash> php zombie-core/install/install.php

   At this point ZombiePHP should be up and running.
   Open it in your browser and check if you can log in.

5. Run the code generator.

   Once you have ZombiePHP installed, you can generate modules
   with the zombie code generator.

   To create a basic module run the following command
   while in the zombie root.

      bash> php zombie.php create-app app=foo

   This creates a module called 'foo'.
   It can be found in zombie/apps/foo/
   You can open it in your browser by going to yourwebsite.com/foo

6. Create a CRUD module.

   To save time zombie comes with templates for basic
   CRUD (Create Replace Update Delete) modules.

   To create a crud module, first create your tables in mysql.
   Here is an example to create a kittens module:

      mysql> CREATE TABLE kitten(id int not null auto_increment primary key,
                                 name varchar(100) not null,
                                 color_id int,
                                 size enum('small', 'medium', 'large'));
      mysql> CREATE TABLE color(id int not null auto_increment primary key,
                                name varchar(100) not null);

   Once those are created, run the code generator:

      bash> php zombie.php create-app app=color template=mysql_crud table=color
      bash> php zombie.php create-app app=kitten template=mysql_crud table=kitten

   That's it! Go to yourwebsite.com/color and yourwebsite.com/kitten
   and see the code in action. You can also edit zombie/apps/menu/menu.php
   to add them to the side menu.

7. Good job.

   Here is a basic layout of zombie to help you as you keep coding:

   Directores:
      zombie/ - root directory. everything is in here.

      zombie/apps - all of the modules are stored here
         zombie comes with a couple modules already made:
            auth - handles authentication (logging in and out)
            console - used for logging things on the client
            csrf - csrf protection
            groups - manage groups that users can belong to
            home - landing page, also loads zs js and default module
            login - login page
            passowrd - allows non-admin users to change their own password
            zombiescript - core javascript library
            users - manage users in the system.
            welcome - default module to be shown

         Each directory in apps has a php file with the same name,
         this file contains the controller methods for the modile.

         Each directory in apps has directory called 'views',
         this is where the html templates are stored. They have
         the .php extension.

         Each views directory should also contain a css and a js directory.
         The javascript and stylesheets for each module should be stored
         in these. css is automagically compiled. Just put a main.css in the
         css directory. Javascript should be loaded with the zs require
         function:

            <script type="text/javascript">
            zs.util.require("mymodule/myjs");
            </script>

         That snippet would include myjs.js from the mymodule app.

      zombie/zombie-core
         This is the guts of the system. Unless you know what 
         you are doing or are a dev for zombie, you probably
         shouldn't touch anything in here.

      zombie/config
         Configuration files are kept here.

      zombie/model
         This is where all models are stored. Each model typically
         contains methods for database interaction and other
         persistent storage.

      zombie/web
         This is visible to the interblag.
         It contains css, images, and whatever else you put in it.
         It also has two php files, index.php and app.php.
         These are launchers for zombie modules. Most users
         should leave these as they are.
